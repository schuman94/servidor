Las comillas dobles pueden encerrar dentro una variable ($x) y la detecta. Las comillas simples no.

var_dump() Funcion que vuelca una varaible a la salida.
intdiv($x, $y) Funcion para dividir y devolver un entero siempre.

gettype() Funcion que devuelve una cadena con el tipo de la varaible.

Existe el tipo NULL cuyo unico valor posible es null.

El valor false se convierte en cadena vacia si se vuelca a la salida con un echo (conversión implicíta en string)
El valor true se convierte en 1 si se vuelca a la salida con un echo (conversión implicíta en string)

isset() Es una "funcion" que te devuelve true si la variable que le indicas existe y está asignada (es decir, que tiene un valor distinto de null). Una variable existente que vale null daria false con esta funcion.
is_null() Es una funcion que te devuelve true o false dependiendo de si el valor de la variable es null.

$x <=> $y   Este operador devuelve -1, 0 o 1 dependiendo de que si $x es menor, igual o mayor que $y




"25" == 25   Aqui el string se convierten en int y luego se comparan y se devuelve true

"250" < "27"  Si esta comparacion se hiciese entre cadenas daria false, pero php las convierte en int y luego las compara, así que da false.

=== devuelve true si los valores son iguales y además del mismo tipo

empty() Devuelve true si la variable es null, 0, "", "0"  Esta funcion puede causar problemas, por ejemplo en un formulario, ya que no es lo mismo dejar un campo vacio a que el usuario escriba un 0
Cuidado con la funcion empty porque si contiene un 0, tambien la da por vacia.

Operador fusion de null:    ??      Es el coalesce del sql, sustituye null por otro valor   $x ?? $y    devuelve $x si no es null, y $y si $x es null

Operador ternario:        $a ? $b : $c     Si $a es true, entonces devuelve $b, y si $a es false, entonces devuelve $c 

$a ?: $b   Operador Elvis

$x[2] accedes a caracter tercero de la cadena, es una indexación. Pero cuidado porque las letras con acento y otros caracteres ocupan de 2bytes, así que esto nunca lo usaremos.

Manipulacion de cadenas multibyte:
mb_substr($x, 2, 1)
Lo mismo pasa con el strlen y el mb_strlen

Arrays numericos:
Tradicionalmente la funcion array() crea un array con los argumentos que le metas:   $a = array('a', 'b', 'c')
Forma más moderna:  $a = ['a', 'b', 'c']
Añadir elemento por el final: $a[] = 'd'


Arrays asociativos:
$a = ['gato' => 'cat', 'perro' => 'dog']

Añadir elemento:
$a[caballo] = 'horse'

Eliminar elemento:
unset($a['perro'])

in_array($x, $y)  La funcion busca el valor $x en el array $y.

count() La funcion cuenta el numero de elementos que contiene el array

foreach ($array as $key => $value) {}
foreach ($array as $value) {}     Indicar $key es opcional

Sintaxis alternativa:
foreach ():
    ...
endforeach;

Si una variable de fuera de una funcion la declaras como global dentro de la propia funcion (global $x;), puedes usarla dentro de dicha funcion sin necesidad de pasarsela como argumento.

require 'auxiliar.php';  Este comando importa el contenido del archivo auxiliar.php al archivo actual (que se encuentra en el mismo directorio), es decir, sirve para importar funciones, objetos, variables...


Si pasas un array como parámetro a una función, en realidad solo le estás pasando una copia del array, por lo que la función no puede modificar el original.
Para pasar el array como referencia en una funcion se debe escribir &$array, de este modo, la función puede modificar el array original.

Lo mismo ocurre con las asignaciones...

Si hago esto: $y = $x      =>  En $y se crea una variable que contiene una copia del array $x. Es decir, son arrays diferentes.

Si hago esto: $y =& $x     =>  $y contiene la variable que apunta al mismo valor que $x (es decir, es la misma variable que $x). Es decir que si luego igualas $y a otra cosa, $x también contiene esa otra cosa. Son la misma variable.
                               Dicho de otra forma $x y $y son dos nombres que puede usarse por igual para hacer referencia a la unica variable que existe.

 
<?php declare(strict_types=1) ?>  Si añades esta linea al principio del archivo, haces que el codigo de php se vuelva estricto con los tipos de variables.


unset()  elimina una variable, array, objeto, propiedad, etc



OBJETOS
En el caso de los objetos  no funciona igual que los arrays, cuando igualas una variable (identificador) a otra que contiene un objeto, la nueva variable (identificador) tambien apunta a ese objeto.
$x       --->       [.]         ---->   [valor]
identificador      Variable             valor, objeto, array...


Pero si haces $x =& $y    entonces  $x apunta a la misma variable que $y, es decir, comparten variable, es la misma y se accede desde cualquiera de los dos identificadores.

Cuando comparamos...

$x == $y  devuelve True si son instancias de la misma clase y sus propiedades tienen los mismos valores  (igualdad)
$x === $y devuelve True si apuntan al mismo objeto, es decir, comparan la referencia. (identidad)

Operador de resolucion de ambito '::'
Sirve para obtener el valor de una constante. Hay que poner el nombre de una clase, dos puntos y el nombre de la constante. Ejemplo:  DateTime::ATOM

Para acceder a propiedades de la instancia de una clase, es decir, propiedades de un objeto, se utiliza el operador '->'

Para crear constantes se usa el ' define': define('nombreconstante', valor)   También está la opción: const nombreconstante = valor;

Para crear una instancia de una clase se usa el 'new'



Las constantes no llevan el $ y van en mayusculas por regla de estilo (pero no hablo de una constante de una clase, sino una constante en tu codigo)


define('FORMATO_ISO', 'Y-m-d H:i:s.u');
define('FORMATO_USUARIO', 'd-m-y H:i:s');

function  fecha_a_usuario(DateTime $d): string
{
    $madrid = new DateTimeZone("Europe/Madrid");
    return (new DateTimeInmutable($d->format(FORMATO_ISO), $madrid))->format(FORMATO_USUARIO);
}

Intervalos

new DateInterval("P4Y3M2D")  me devuelve un intervalo de 4 años, 3 meses y 2 dias


Cuando tenemos que recorrer una cadena y hacer comprobaciones en la propia cadena, tenemos una funcion que no tiene un coste lineal.
Por lo tanto, puede ser util crear un array indexado, donde los caracteres de la cadena sean las claves, no los valores.
De esta forma se puede comprobar casi inmediatamente si ese caracter está, sin tener que recorrer todo el array, ya que es acceso automatico.
Realmente es casi como si hubiesemos construido un conjunto de python.


A una funcion si le pasas un parametro con un valor primitivo (incluido arrays) se pasa una copia, sin embargo...
si le pasas un objeto, le estás pasando la referencia al objeto, por lo que la función puede modificar ese objeto concreto y no una copia.

El fecthColumn recoge el valor de la columna directamente en vez de recoger toda la fila.
Es util para consultas que sabes que devuelven una unica fila y columna, es decir, un valor (como el count)
Pero recuerda que a las select con funciones de agregacion no se le puede poner el FOR UPDATE.


Funciones de Expresiones regulares:
preg_match('/expresion_regular/', 'cadena', $array_matches) 
El array de matches se rellena con la cadena como primer elemento y como segundo elemento el primer grupo de captura, 
es decir, el primer paréntesis que hayas puesto dentro de la expresión. Y tendrá más si has puesto más grupos de captura.


Una funcion para comprobar que todos los caracteres de una cadena son digitos: ctype_digit()
Es útil para la comprobación del id de una tabla, ya que no sirve solo con is_numeric()

La función extract($array) te crea tantas variables como elementos tenga el array asociatvo, en donde el nombre de la variable es la key del elemento y el valor es el value.
Pero cuidado que puede haber un elemento del que no querias que se creara una variable. Y cuidado que puede machacar una variable que ya existia con ese mismo nombre.
Muy posiblemente tengamos problemas con el id, ya que puede machacar otro id que ya teniamos pillado por get.







