Ctrl + p   es el buscador de archivos de code 


Antes de instalar laravel: sudo apt install php-xml php-sqlite3


Instalar laravel:
composer create-project laravel/laravel nombreProyecto

Arrancar el servidor: php artisan serve

Dentro del proyecto: npm install
npm run build  (construye los assets adecuados)

El comando "composer run dev" es la combinacion del "php artisan serve" + "npm run dev" 

php artisan tinker es el psyshell que tiene laravel

Para crear el repositorio:
git init
git add .
git commit -m "Carga inicial"
gh repo create

(Recuerda marcar: push and existing local to github)

Instalar la extension de code: laravel extension pack

Primer archivo importante: /routes/web.php
(rutas que la aplicacion web entiende. Una ruta es una url que la aplicacion es capaz de atender.)


Puedes ir a las diferentes views pulsando ctrl + click en el nombre de la vista.

el comando: php artisan route:list   nos devuelve un listado de todas nuestras rutas

En /public/index.php es el front controller


En  /config/app.php estan los parametros de configuracion.  Aqui se cargan variables de entorno y en caso de no existir le dan un valor por defecto. Las variables de entorno se crean en:

El archivo /.env contiene las variables de entorno
Aqui hay que cambiar la base de datos para usar el postgresql


El archivo /config/database.php es la configuracion de la base de datos. Normalmente no la tocamos.

Las migraciones se encuentran en /database/migrations




Crear el usuario de la base de datos:
sudo -u postgres createuser -P agitame

Crear la base de datos:
sudo -u postgres createdb -O agitame agitame


Ahora modificamos en el .env:
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=agitame
DB_PASSWORD=agitame
DB_USERNAME=agitame



Ahora hago:
php artisan migrate:status  y me dirá que migration table not found. Es normal, nunca se han creado.
php artisan migrate     esto me crea la tabla de migraciones y aplica todas las migraciones

Comando para abrir la consola de la base de datos con el php artisan:
php artisan db 






Instalacion del breeze:

composer require laravel/breeze --dev
php artisan breeze:install
php artisan migrate
npm install
npm run dev




Los facades (fachadas) son clases que solo tienen métodos estaticos.


Asi programaríamos:
En web.php creamos una nueva ruta para departamentos
Luego en resources/view nos creamos una carpeta, por ejemplo, departamentos, y dentro de ella podemos crearnos una vista llamada index.blade.php
Dentro de index.blade.php lo que escribiriamos seria codigo de frontend dentro de un <x-app-layout> por ejemplo.
Luego creariamos  una migracion para incluir la tabla departamentos


Ejecutamos un: php artisan make:migration create_departamentos_table

y ahora nos vamos a la migracion que se ha creado en: /database/migrations/2024_11_13_201723_create_departamentos_table.php

Aqui añadimos las columnas de departamento.

Luego ejecutamos un: php artisan migrate
Y ya se corre la migracion para crear la tabla en la base de datos. 



AQUI VA LO DEL OTRO PC
php artisan db => abre una consola con el postgres

instalar el flowbite en laravel (primero instala tailwind)
https://flowbite.com/docs/getting.started/laravel/
npm install -D flowbite

Modificar el tailwind.config.js, quedaria asi:
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/**/*.blade.php',
        './resources/**/*.js',
        './resources/**/*.vue',
        './node_modules/flowbite/**/*.js'
    ],

    theme: {
        extend: {
            fontFamily: {
                sans: ['Figtree', ...defaultTheme.fontFamily.sans],
            },
        },
    },

    plugins: [
        forms,
        require('flowbite/plugin')
    ],
};


En el archivo ./resources/js/app.js hay que añadir: import 'flowbite';

Por si acaso, cerrar el composer run dev y volverlo a arrancar.




Para crear modelo: php artisan make:model -cfs departamento-cfs crea el controlador, la factoria y la semilla

Con eloquent tenemos objetos a los que se les puede aplicar metodos como all, find (busca por id) el save (update o insert)

_________________________________________________________________________________.
Cuando me clono de 0 un repositorio tengo que hacer esto:                        |
composer install                                                                 |
npm install                                                                      | 
cambiar o crear el .env                                                          | 
php artisan migrate   (puedes asegurarte poniendo un php artisan migrate:fresh   |
                       para limpiar todo antes en la base de datos)              |
_________________________________________________________________________________|



El laravel sabe que si mandas un objeto modelo que lleva un id, lee directamente el id del objeto, no hace falta poner $departamento->id vale con $departamento

la funcion dd() es un dump y un die

